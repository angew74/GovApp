// <auto-generated />
using System;
using Gov.Structure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Gov.Structure.Migrations
{
    [DbContext(typeof(GovContext))]
    partial class GovContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Gov.Core.Camera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataFine")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Camera");
                });

            modelBuilder.Entity("Gov.Core.Coalizione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Denominazione")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Coalizione");
                });

            modelBuilder.Entity("Gov.Core.Dicastero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataFine")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataGiuramento")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataSfiducia")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("GovernoId")
                        .HasColumnType("int");

                    b.Property<int?>("MinisteroId")
                        .HasColumnType("int");

                    b.Property<int?>("MinistroId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("GovernoId");

                    b.HasIndex("MinisteroId");

                    b.HasIndex("MinistroId");

                    b.ToTable("Dicastero");
                });

            modelBuilder.Entity("Gov.Core.Entity.Contenuto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContentuoCard")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PaginaId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<int>("TipoContenutoId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PaginaId");

                    b.HasIndex("TipoContenutoId");

                    b.ToTable("Contenuto");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentuoCard = "Da questa pagina è possibile registrare le affluenze",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 360, DateTimeKind.Local).AddTicks(5167),
                            PaginaId = 1,
                            Tipo = "Testo",
                            TipoContenutoId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ContentuoCard = "person-plus-fill",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 360, DateTimeKind.Local).AddTicks(9600),
                            PaginaId = 1,
                            Tipo = "Icona",
                            TipoContenutoId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            ContentuoCard = "/affluenza/inserimento",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 360, DateTimeKind.Local).AddTicks(9730),
                            PaginaId = 1,
                            Tipo = "Link",
                            TipoContenutoId = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            ContentuoCard = "Affluenza Inserimento",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 360, DateTimeKind.Local).AddTicks(9747),
                            PaginaId = 1,
                            Tipo = "Header",
                            TipoContenutoId = 4,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            ContentuoCard = "Da questa pagina è possibile modificare le affluenze",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 360, DateTimeKind.Local).AddTicks(9759),
                            PaginaId = 2,
                            Tipo = "Testo",
                            TipoContenutoId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            ContentuoCard = "person-check-fill",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 360, DateTimeKind.Local).AddTicks(9772),
                            PaginaId = 2,
                            Tipo = "Icona",
                            TipoContenutoId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            ContentuoCard = "/affluenza/modifica",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 360, DateTimeKind.Local).AddTicks(9783),
                            PaginaId = 2,
                            Tipo = "Link",
                            TipoContenutoId = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            ContentuoCard = "Affluenze Modifica",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 360, DateTimeKind.Local).AddTicks(9795),
                            PaginaId = 2,
                            Tipo = "Header",
                            TipoContenutoId = 4,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            ContentuoCard = "Da questa pagina è possibile visualizzare le affluenze",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 360, DateTimeKind.Local).AddTicks(9806),
                            PaginaId = 3,
                            Tipo = "Testo",
                            TipoContenutoId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            ContentuoCard = "people-fill",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 360, DateTimeKind.Local).AddTicks(9819),
                            PaginaId = 3,
                            Tipo = "Icona",
                            TipoContenutoId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            ContentuoCard = "/affluenza/visualizza",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 360, DateTimeKind.Local).AddTicks(9831),
                            PaginaId = 3,
                            Tipo = "Link",
                            TipoContenutoId = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            ContentuoCard = "Affluenze Visualizzazione",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 360, DateTimeKind.Local).AddTicks(9843),
                            PaginaId = 3,
                            Tipo = "Header",
                            TipoContenutoId = 4,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            ContentuoCard = "Da questa pagina è possibile gestire gli Utenti",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 360, DateTimeKind.Local).AddTicks(9858),
                            PaginaId = 8,
                            Tipo = "Testo",
                            TipoContenutoId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            ContentuoCard = "people-fill",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 360, DateTimeKind.Local).AddTicks(9871),
                            PaginaId = 8,
                            Tipo = "Icona",
                            TipoContenutoId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            ContentuoCard = "/GovApp/account/manage",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 360, DateTimeKind.Local).AddTicks(9885),
                            PaginaId = 8,
                            Tipo = "Link",
                            TipoContenutoId = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            ContentuoCard = "Gestione Utenti",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 360, DateTimeKind.Local).AddTicks(9899),
                            PaginaId = 8,
                            Tipo = "Header",
                            TipoContenutoId = 4,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            ContentuoCard = "Da questa pagina è possibile registrare nuovi utenti",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 360, DateTimeKind.Local).AddTicks(9912),
                            PaginaId = 9,
                            Tipo = "Testo",
                            TipoContenutoId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            ContentuoCard = "person-plus-fill",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 360, DateTimeKind.Local).AddTicks(9923),
                            PaginaId = 9,
                            Tipo = "Icona",
                            TipoContenutoId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19,
                            ContentuoCard = "/GovApp/account/register",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 360, DateTimeKind.Local).AddTicks(9966),
                            PaginaId = 9,
                            Tipo = "Link",
                            TipoContenutoId = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20,
                            ContentuoCard = "Registrazione Utente",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 360, DateTimeKind.Local).AddTicks(9978),
                            PaginaId = 9,
                            Tipo = "Header",
                            TipoContenutoId = 4,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 21,
                            ContentuoCard = "Da questa pagina è possibile cambiare la password",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 360, DateTimeKind.Local).AddTicks(9989),
                            PaginaId = 13,
                            Tipo = "Testo",
                            TipoContenutoId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 22,
                            ContentuoCard = "gear-wide-connected",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 361, DateTimeKind.Local),
                            PaginaId = 13,
                            Tipo = "Icona",
                            TipoContenutoId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 23,
                            ContentuoCard = "/account/changepassword",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 361, DateTimeKind.Local).AddTicks(11),
                            PaginaId = 13,
                            Tipo = "Link",
                            TipoContenutoId = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 24,
                            ContentuoCard = "Cambio password",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 361, DateTimeKind.Local).AddTicks(21),
                            PaginaId = 13,
                            Tipo = "Header",
                            TipoContenutoId = 4,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 25,
                            ContentuoCard = "https://www.panoramasanita.it/wp-content/uploads/2019/05/roma.jpg",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 361, DateTimeKind.Local).AddTicks(32),
                            PaginaId = 14,
                            Tipo = "Image",
                            TipoContenutoId = 5,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 26,
                            ContentuoCard = "Gestione Utenti",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 361, DateTimeKind.Local).AddTicks(43),
                            PaginaId = 14,
                            Tipo = "Titolo",
                            TipoContenutoId = 6,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 27,
                            ContentuoCard = "https://res.cloudinary.com/hzekpb1cg/image/upload/c_fill,h_581,w_1185,f_auto/s3/public/prod/s3fs-public/Quartieri-di-Roma.jpg",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 361, DateTimeKind.Local).AddTicks(54),
                            PaginaId = 14,
                            Tipo = "Image",
                            TipoContenutoId = 5,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 28,
                            ContentuoCard = "Gestione Affluenze",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 361, DateTimeKind.Local).AddTicks(66),
                            PaginaId = 14,
                            Tipo = "Titolo",
                            TipoContenutoId = 6,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 29,
                            ContentuoCard = "https://roma.unicatt.it/ingresso-roma-992x560.jpg",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 361, DateTimeKind.Local).AddTicks(77),
                            PaginaId = 14,
                            Tipo = "Image",
                            TipoContenutoId = 5,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 30,
                            ContentuoCard = "Gestione Interrogazioni",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 361, DateTimeKind.Local).AddTicks(88),
                            PaginaId = 14,
                            Tipo = "Titolo",
                            TipoContenutoId = 6,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Affluenze", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Affluenza1")
                        .HasColumnType("int");

                    b.Property<int?>("Affluenza2")
                        .HasColumnType("int");

                    b.Property<int?>("Affluenza3")
                        .HasColumnType("int");

                    b.Property<int?>("Affluenza4")
                        .HasColumnType("int");

                    b.Property<int?>("Affluenza5")
                        .HasColumnType("int");

                    b.Property<int?>("Apertura1")
                        .HasColumnType("int");

                    b.Property<int?>("Apertura2")
                        .HasColumnType("int");

                    b.Property<int?>("Apertura3")
                        .HasColumnType("int");

                    b.Property<int?>("Costituzione1")
                        .HasColumnType("int");

                    b.Property<int?>("Costituzione2")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Iscrittiid")
                        .HasColumnType("int");

                    b.Property<int?>("Plessoid")
                        .HasColumnType("int");

                    b.Property<int>("Sezioneid")
                        .HasColumnType("int");

                    b.Property<int>("Tipoelezioneid")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Votantifemmine1")
                        .HasColumnType("int");

                    b.Property<int?>("Votantifemmine2")
                        .HasColumnType("int");

                    b.Property<int?>("Votantifemmine3")
                        .HasColumnType("int");

                    b.Property<int?>("Votantifemmine4")
                        .HasColumnType("int");

                    b.Property<int?>("Votantifemmine5")
                        .HasColumnType("int");

                    b.Property<int?>("Votantimaschi1")
                        .HasColumnType("int");

                    b.Property<int?>("Votantimaschi2")
                        .HasColumnType("int");

                    b.Property<int?>("Votantimaschi3")
                        .HasColumnType("int");

                    b.Property<int?>("Votantimaschi4")
                        .HasColumnType("int");

                    b.Property<int?>("Votantimaschi5")
                        .HasColumnType("int");

                    b.Property<int?>("Votantitotali1")
                        .HasColumnType("int");

                    b.Property<int?>("Votantitotali2")
                        .HasColumnType("int");

                    b.Property<int?>("Votantitotali3")
                        .HasColumnType("int");

                    b.Property<int?>("Votantitotali4")
                        .HasColumnType("int");

                    b.Property<int?>("Votantitotali5")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("Iscrittiid")
                        .HasName("fk_affluenze_iscritti_idx");

                    b.HasIndex("Plessoid")
                        .HasName("fk_affluenze_plessi_idx");

                    b.HasIndex("Sezioneid")
                        .HasName("fk_affluenza_sezioni_idx");

                    b.HasIndex("Tipoelezioneid")
                        .HasName("fk_affluenze_tipo_elezione_idx");

                    b.ToTable("affluenze");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.AffluenzeStorico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Affluenza1")
                        .HasColumnType("int");

                    b.Property<int?>("Affluenza2")
                        .HasColumnType("int");

                    b.Property<int?>("Affluenza3")
                        .HasColumnType("int");

                    b.Property<int?>("Affluenza4")
                        .HasColumnType("int");

                    b.Property<int?>("Affluenza5")
                        .HasColumnType("int");

                    b.Property<int?>("Apertura1")
                        .HasColumnType("int");

                    b.Property<int?>("Apertura2")
                        .HasColumnType("int");

                    b.Property<int?>("Apertura3")
                        .HasColumnType("int");

                    b.Property<int?>("Costituzione1")
                        .HasColumnType("int");

                    b.Property<int?>("Costituzione2")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataOperazioneold")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Iscrittiid")
                        .HasColumnType("int");

                    b.Property<int?>("Plessoid")
                        .HasColumnType("int");

                    b.Property<int>("Sezioneid")
                        .HasColumnType("int");

                    b.Property<int>("Tipoelezioneid")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UtenteOperazioneold")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("Votantifemmine1")
                        .HasColumnType("int");

                    b.Property<int?>("Votantifemmine2")
                        .HasColumnType("int");

                    b.Property<int?>("Votantifemmine3")
                        .HasColumnType("int");

                    b.Property<int?>("Votantifemmine4")
                        .HasColumnType("int");

                    b.Property<int?>("Votantifemmine5")
                        .HasColumnType("int");

                    b.Property<int?>("Votantimaschi1")
                        .HasColumnType("int");

                    b.Property<int?>("Votantimaschi2")
                        .HasColumnType("int");

                    b.Property<int?>("Votantimaschi3")
                        .HasColumnType("int");

                    b.Property<int?>("Votantimaschi4")
                        .HasColumnType("int");

                    b.Property<int?>("Votantimaschi5")
                        .HasColumnType("int");

                    b.Property<int?>("Votantitotali1")
                        .HasColumnType("int");

                    b.Property<int?>("Votantitotali2")
                        .HasColumnType("int");

                    b.Property<int?>("Votantitotali3")
                        .HasColumnType("int");

                    b.Property<int?>("Votantitotali4")
                        .HasColumnType("int");

                    b.Property<int?>("Votantitotali5")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Iscrittiid")
                        .HasName("fk_affluenze_storico_iscritti_idx");

                    b.HasIndex("Plessoid")
                        .HasName("fk_affluenze_storico_plessi_idx");

                    b.HasIndex("Sezioneid")
                        .HasName("fk_affluenze_storico_sezioni_idx");

                    b.HasIndex("Tipoelezioneid")
                        .HasName("fk_affluenze_storico_tipo_elezione_idx");

                    b.ToTable("affluenze_storico");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.AggregazioneInterrogazioni", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Codice")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("Tipoelezioneid")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Tipoelezioneid")
                        .HasName("fk_aggregazione_interrogazioni_tipo_elezione_idx");

                    b.HasIndex("Descrizione", "Tipoelezioneid", "Codice")
                        .IsUnique()
                        .HasName("unique_aggregazione_interrogazioni");

                    b.ToTable("aggregazione_interrogazioni");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Candidati", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CognomeCandidato")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Listaid")
                        .HasColumnType("int");

                    b.Property<string>("NomeCandidato")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Progressivo")
                        .HasColumnType("int");

                    b.Property<string>("SessoCandidato")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Tipoelezioneid")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Listaid")
                        .HasName("fk_candidati_lista_idx");

                    b.HasIndex("Tipoelezioneid")
                        .HasName("fk_candidati_tipo_elezione_idx");

                    b.HasIndex("Progressivo", "Listaid", "Tipoelezioneid")
                        .IsUnique()
                        .HasName("uk_candidato_lista_progressivo");

                    b.ToTable("candidati");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Elegen", b =>
                {
                    b.Property<int>("Idelegen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Annoelezione")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Giornocostituzione")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Giornovotazione1")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Giornovotazione2")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Idtipoelezione")
                        .HasColumnType("int");

                    b.Property<int?>("Numeroliste")
                        .HasColumnType("int");

                    b.Property<int>("Numerosezioni")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Idelegen")
                        .HasName("PRIMARY");

                    b.HasIndex("Idelegen")
                        .IsUnique()
                        .HasName("idelegencam_UNIQUE");

                    b.HasIndex("Idtipoelezione")
                        .HasName("fk_elegen_tipo_elezione_idx");

                    b.ToTable("elegen");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.FaseElezione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Abilitata")
                        .HasColumnType("int");

                    b.Property<string>("Codice")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Idtipoelezione")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Idtipoelezione")
                        .HasName("fk_fase_elezione_tipo_elezione_idx");

                    b.HasIndex("Codice", "Idtipoelezione")
                        .IsUnique()
                        .HasName("uq_fase_elezioni_elezioni");

                    b.ToTable("fase_elezione");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Iscritti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cabina")
                        .HasColumnType("int");

                    b.Property<int>("Collegiocamera")
                        .HasColumnType("int");

                    b.Property<int>("Collegioprovinciale")
                        .HasColumnType("int");

                    b.Property<int>("Collegiosenato")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Idsezione")
                        .HasColumnType("int");

                    b.Property<int>("Idtipoelezione")
                        .HasColumnType("int");

                    b.Property<uint?>("Idtiposezione")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int>("Iscrittifemmine")
                        .HasColumnType("int");

                    b.Property<int>("Iscrittifemminegen")
                        .HasColumnType("int");

                    b.Property<int>("Iscrittifemmineue")
                        .HasColumnType("int");

                    b.Property<int>("Iscrittimaschi")
                        .HasColumnType("int");

                    b.Property<int>("Iscrittimaschigen")
                        .HasColumnType("int");

                    b.Property<int>("Iscrittimaschiue")
                        .HasColumnType("int");

                    b.Property<int>("Iscrittitotali")
                        .HasColumnType("int");

                    b.Property<int>("Iscrittitotaligen")
                        .HasColumnType("int");

                    b.Property<int>("Iscrittitotaliue")
                        .HasColumnType("int");

                    b.Property<int>("Municipio")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Idsezione")
                        .IsUnique()
                        .HasName("idsezione_UNIQUE");

                    b.HasIndex("Idtipoelezione")
                        .HasName("fk_tipo_elezione_iscritti_idx");

                    b.HasIndex("Idtiposezione")
                        .HasName("fk_tiposezione_iscritti_idx");

                    b.ToTable("iscritti");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Liste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Coalizioneid")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Denominazione")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DenominazioneBreve")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("Progressivo")
                        .HasColumnType("int");

                    b.Property<int?>("ProgressivoCoalizione")
                        .HasColumnType("int");

                    b.Property<int?>("ProgressivoManifesto")
                        .HasColumnType("int");

                    b.Property<int?>("Sindacoid")
                        .HasColumnType("int");

                    b.Property<int>("Tipoelezioneid")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Coalizioneid")
                        .HasName("fk_liste_coalizioni_idx1");

                    b.HasIndex("ProgressivoCoalizione")
                        .HasName("fk_liste_coalizioni_idx");

                    b.HasIndex("Sindacoid")
                        .HasName("fk_liste_sindaci_idx");

                    b.HasIndex("Tipoelezioneid")
                        .HasName("fl_liste_tipo_elezione_idx");

                    b.ToTable("liste");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Matrice", b =>
                {
                    b.Property<int>("Idmatrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Collegiocamera")
                        .HasColumnType("int");

                    b.Property<int?>("Collegioprovinciale")
                        .HasColumnType("int");

                    b.Property<int?>("Collegiosenato")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Idtipoelezione")
                        .HasColumnType("int");

                    b.Property<int?>("Iscrittifemmine")
                        .HasColumnType("int");

                    b.Property<int?>("Iscrittimaschi")
                        .HasColumnType("int");

                    b.Property<int?>("Iscrittitotali")
                        .HasColumnType("int");

                    b.Property<int?>("Municipio")
                        .HasColumnType("int");

                    b.Property<int?>("Numerosezioni")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Idmatrice")
                        .HasName("PRIMARY");

                    b.HasIndex("Idtipoelezione")
                        .HasName("fk_matrice_tipo_elezione_idx");

                    b.HasIndex("Iscrittifemmine")
                        .IsUnique()
                        .HasName("iscrittifemmine_UNIQUE");

                    b.HasIndex("Iscrittimaschi")
                        .IsUnique()
                        .HasName("iscrittimaschi_UNIQUE");

                    b.ToTable("matrice");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Municipi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Municipio")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("municipi");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Plessi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Idtipoelezione")
                        .HasColumnType("int");

                    b.Property<int?>("Municipio")
                        .HasColumnType("int");

                    b.Property<string>("Ubicazione")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Idtipoelezione")
                        .HasName("fk_plessi_tipoelezione_idx");

                    b.ToTable("plessi");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.ProfiloVoti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Sezioneid")
                        .HasColumnType("int");

                    b.Property<int>("Tipoelezioneid")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Votigeneraliid")
                        .HasColumnType("int");

                    b.Property<int?>("Votilistaid")
                        .HasColumnType("int");

                    b.Property<int?>("Votisindacoid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Sezioneid")
                        .HasName("fk_voti_sezioni_idx");

                    b.HasIndex("Votigeneraliid")
                        .HasName("fk_voti_votigenerali_idx");

                    b.HasIndex("Votilistaid")
                        .HasName("fk_voti_votilista_idx");

                    b.HasIndex("Votisindacoid")
                        .HasName("fk_voti_votisindaco_idx");

                    b.HasIndex("Tipoelezioneid", "Sezioneid")
                        .HasName("fk_voti_tipoelezione_idx");

                    b.ToTable("profilo_voti");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Raggruppamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Denominazione")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DenominazioneBreve")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Idtipoelezione")
                        .HasColumnType("int");

                    b.Property<int>("Sindacoid")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("Idtipoelezione")
                        .HasName("fk_tipoelezioni_coalizioni_idx");

                    b.HasIndex("Sindacoid")
                        .HasName("fk_sindaci_coalizioni_idx");

                    b.ToTable("Raggruppamento");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.RicalcoliAffluenza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AffluenzaFemmine")
                        .HasColumnType("int");

                    b.Property<int>("AffluenzaMaschi")
                        .HasColumnType("int");

                    b.Property<int>("AffluenzaTotale")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Idtipoelezione")
                        .HasColumnType("int");

                    b.Property<int>("Idtiporicalcolo")
                        .HasColumnType("int");

                    b.Property<int>("IscrittiFemmine")
                        .HasColumnType("int");

                    b.Property<int>("IscrittiMaschi")
                        .HasColumnType("int");

                    b.Property<int?>("IscrittiTotale")
                        .HasColumnType("int");

                    b.Property<int>("Municipio")
                        .HasColumnType("int");

                    b.Property<int>("NumeroAffluenza")
                        .HasColumnType("int");

                    b.Property<int?>("NumeroSezioni")
                        .HasColumnType("int");

                    b.Property<string>("PercentualeFemmine")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PercentualeMaschi")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PercentualeSezioniPervenute")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PercentualeTotale")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TotaleSezioni")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Idtipoelezione")
                        .HasName("fk_ricaloli_affluenza_tipo_elezione_idx");

                    b.HasIndex("Idtiporicalcolo")
                        .HasName("ricalcoli_affluenza_idx");

                    b.ToTable("ricalcoli_affluenza");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.RicalcoloAperturaCostituzione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Idtipoelezione")
                        .HasColumnType("int");

                    b.Property<int>("Idtiporicalcolo")
                        .HasColumnType("int");

                    b.Property<int>("IscrittiTotali")
                        .HasColumnType("int");

                    b.Property<int>("Municipio")
                        .HasColumnType("int");

                    b.Property<int>("NumeroAperte")
                        .HasColumnType("int");

                    b.Property<int>("NumeroCostituite")
                        .HasColumnType("int");

                    b.Property<int>("NumeroSezioni")
                        .HasColumnType("int");

                    b.Property<string>("PercentualeAperte")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PercentualeCostituite")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Idtipoelezione")
                        .HasName("fk_ricalcoli_apertura_costituzione_tipo_elezione_idx");

                    b.HasIndex("Idtiporicalcolo")
                        .HasName("fk_ricalcoli_apertura_costituzione_tipo_ricalcolo_idx");

                    b.ToTable("ricalcoli_apertura_costituzione");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.RicalcoloPreferenze", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Candidatoid")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IscrittiPervenute")
                        .HasColumnType("int");

                    b.Property<int>("IscrittiTotale")
                        .HasColumnType("int");

                    b.Property<int>("Listaid")
                        .HasColumnType("int");

                    b.Property<int>("Municipio")
                        .HasColumnType("int");

                    b.Property<int>("NumeroSezioni")
                        .HasColumnType("int");

                    b.Property<int>("NumeroVoti")
                        .HasColumnType("int");

                    b.Property<string>("PercentualeSezioniPervenute")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PercentualeVotantiPervenute")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PercentualeVotantiTotale")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PercentualeVoti")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Tipoelezioneid")
                        .HasColumnType("int");

                    b.Property<int>("Tiporicalcoloid")
                        .HasColumnType("int");

                    b.Property<int>("TotaleSezioni")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VotantiPervenute")
                        .HasColumnType("int");

                    b.Property<int>("VotantiTotale")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Candidatoid")
                        .HasName("fk_ricalcolo_preferenze_candidato_idx");

                    b.HasIndex("Listaid")
                        .HasName("fk_ricalcolo_preferenze_liste_idx");

                    b.HasIndex("Tipoelezioneid")
                        .HasName("fk_ricalcolo_preferenze_tipo_elezione_idx");

                    b.HasIndex("Tiporicalcoloid")
                        .HasName("fk_ricalcolo_tipo_ricalcolo_idx");

                    b.ToTable("ricalcolo_preferenze");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.RicalcoloVotiLista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Idlista")
                        .HasColumnType("int");

                    b.Property<int>("Idtipoelezione")
                        .HasColumnType("int");

                    b.Property<int>("Idtiporicalcolo")
                        .HasColumnType("int");

                    b.Property<int>("IscrittiPervenute")
                        .HasColumnType("int");

                    b.Property<int>("IscrittiTotale")
                        .HasColumnType("int");

                    b.Property<int>("Municipio")
                        .HasColumnType("int");

                    b.Property<int>("NumeroSezioni")
                        .HasColumnType("int");

                    b.Property<int>("NumeroVoti")
                        .HasColumnType("int");

                    b.Property<string>("PercentualeSezioniPervenute")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PercentualeVotantiPervenute")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PercentualeVotantiTotale")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PercentualeVoti")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TotaleSezioni")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VotantiPervenute")
                        .HasColumnType("int");

                    b.Property<int>("VotantiTotali")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Idlista")
                        .HasName("fk_ricalcolo_voti_lista_idx");

                    b.HasIndex("Idtipoelezione")
                        .HasName("fk_ricalcolo_voti_tipo_elezione_idx");

                    b.HasIndex("Idtiporicalcolo")
                        .HasName("fk_ricalcolo_voti_tipo_ricalcolo_idx");

                    b.ToTable("ricalcolo_voti_lista");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.RicalcoloVotiRaggruppamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Coalizioneid")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IscrittiPervenute")
                        .HasColumnType("int");

                    b.Property<int>("IscrittiTotale")
                        .HasColumnType("int");

                    b.Property<int>("Municipio")
                        .HasColumnType("int");

                    b.Property<int>("NumeroSezioni")
                        .HasColumnType("int");

                    b.Property<int>("NumeroVoti")
                        .HasColumnType("int");

                    b.Property<string>("PercentualeSezioniPervenute")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PercentualeVotantiPervenute")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PercentualeVotantiTotale")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PercentualeVoti")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Tipoelezioneid")
                        .HasColumnType("int");

                    b.Property<int>("Tiporicalcoloid")
                        .HasColumnType("int");

                    b.Property<int>("TotaleSezioni")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VotantiPervenute")
                        .HasColumnType("int");

                    b.Property<int>("VotantiTotale")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Coalizioneid")
                        .HasName("fk_riacalcolo_coalizioni_coalizioni_idx");

                    b.HasIndex("Tipoelezioneid")
                        .HasName("fk_ricalcolo_coalizioni_tipo_elezioni_idx");

                    b.HasIndex("Tiporicalcoloid")
                        .HasName("fk_ricalcolo_coalizioni_tipo_ricalcolo_idx");

                    b.ToTable("ricalcolo_voti_coalizioni");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.RicalcoloVotiSindaco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IscrittiPervenute")
                        .HasColumnType("int");

                    b.Property<int>("IscrittiTotale")
                        .HasColumnType("int");

                    b.Property<int>("Municipio")
                        .HasColumnType("int");

                    b.Property<int>("NumeroSezioni")
                        .HasColumnType("int");

                    b.Property<int>("NumeroVoti")
                        .HasColumnType("int");

                    b.Property<int>("NumeroVotiSoloSindaco")
                        .HasColumnType("int");

                    b.Property<string>("PercentualeSezioniPervenute")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PercentualeVotantiPervenute")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PercentualeVotantiTotale")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PercentualeVoti")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Sindacoid")
                        .HasColumnType("int");

                    b.Property<int>("Tipoelezioneid")
                        .HasColumnType("int");

                    b.Property<int>("Tiporicalcoloid")
                        .HasColumnType("int");

                    b.Property<int>("TotaleSezioni")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VotantiPervenute")
                        .HasColumnType("int");

                    b.Property<int>("VotantiTotale")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Sindacoid")
                        .HasName("fk_riacalcolo_sindaci_sindaci_idx");

                    b.HasIndex("Tipoelezioneid")
                        .HasName("fk_ricalcolo_sindaci_tipo_elezioni_idx");

                    b.HasIndex("Tiporicalcoloid")
                        .HasName("fk_ricalcolo_sindaci_tipo_ricalcolo_idx");

                    b.ToTable("ricalcolo_voti_sindaco");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Sezioni", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cabina")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Idplesso")
                        .HasColumnType("int");

                    b.Property<int?>("Idtipoelezione")
                        .HasColumnType("int");

                    b.Property<uint?>("Idtiposezione")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int?>("Municipio")
                        .HasColumnType("int");

                    b.Property<int>("Numerosezione")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Idplesso")
                        .HasName("fk_sezioni_plessi_idx");

                    b.HasIndex("Idtipoelezione")
                        .HasName("fk_sezioni_tipoelezione_idx");

                    b.HasIndex("Idtiposezione")
                        .HasName("fk_sezioni_tiposezione_idx");

                    b.HasIndex("Numerosezione", "Idtipoelezione")
                        .IsUnique()
                        .HasName("numerosezione_UNIQUE");

                    b.ToTable("sezioni");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Sindaci", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Progressivo")
                        .HasColumnType("int");

                    b.Property<string>("Sesso")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Tipoelezioneid")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Tipoelezioneid")
                        .HasName("fk_tipo_elezione_sindaci_idx");

                    b.ToTable("sindaci");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.TipoInterrogazione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Codice")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CodiceFase")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Tipoelezioneid")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Tipoelezioneid")
                        .HasName("tipo_interrogazione_tipo_elezione_idx");

                    b.ToTable("tipo_interrogazione");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.TipoRicalcolo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Codice")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CodiceFase")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Idtipoelezione")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Idtipoelezione")
                        .HasName("fk_tipo_ricalcolo_tipo_elezione_idx");

                    b.ToTable("tipo_ricalcolo");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.TipoRicalcoloAggregazione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Codice")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("Tipoelezioneid")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Tipoelezioneid")
                        .HasName("tipo_ricalcolo_aggregazione_tipo_elezione_idx");

                    b.HasIndex("Descrizione", "Codice", "Tipoelezioneid")
                        .IsUnique()
                        .HasName("tipo_ricalcolo_aggregazione_unique");

                    b.ToTable("tipo_ricalcolo_aggregazione");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Tipoelezione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Dataelezione")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Descrizione")
                        .IsUnique()
                        .HasName("descrizione_UNIQUE");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("idtipoelezione_UNIQUE");

                    b.ToTable("tipoelezione");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Tiposezione", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(10) unsigned");

                    b.Property<string>("Codicesezione")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("tiposezione");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.UsersSezioni", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Idtipoelezione")
                        .HasColumnType("int");

                    b.Property<int?>("Sezioneid")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Idtipoelezione")
                        .HasName("fk_users_sezione_tipoelezione_idx");

                    b.HasIndex("Sezioneid")
                        .HasName("fk_users_sezioni_sezioni_idx");

                    b.HasIndex("UserId")
                        .HasName("fk_users_sezioni_users_idx");

                    b.ToTable("users_sezioni");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.VotiGenerali", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Bianche")
                        .HasColumnType("int");

                    b.Property<int>("Contestate")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Municipio")
                        .HasColumnType("int");

                    b.Property<int>("Nulle")
                        .HasColumnType("int");

                    b.Property<int>("Sezioneid")
                        .HasColumnType("int");

                    b.Property<int>("SoloSindaco")
                        .HasColumnType("int");

                    b.Property<int>("Tipoelezioneid")
                        .HasColumnType("int");

                    b.Property<int>("Totale")
                        .HasColumnType("int");

                    b.Property<int>("TotaleValide")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Sezioneid")
                        .HasName("fk_voti_sezione_idx");

                    b.HasIndex("Tipoelezioneid")
                        .HasName("fk_voti_tipoelezione_idx");

                    b.ToTable("voti_generali");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.VotiGeneraliStorico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Bianche")
                        .HasColumnType("int");

                    b.Property<int>("Contestate")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataOperazioneOld")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Municipio")
                        .HasColumnType("int");

                    b.Property<int>("Nulle")
                        .HasColumnType("int");

                    b.Property<int>("Sezioneid")
                        .HasColumnType("int");

                    b.Property<int>("SoloSindaco")
                        .HasColumnType("int");

                    b.Property<int>("Tipoelezioneid")
                        .HasColumnType("int");

                    b.Property<int>("Totale")
                        .HasColumnType("int");

                    b.Property<int>("TotaleValide")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UtenteOperazioneOld")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("Sezioneid")
                        .HasName("fk_voti_storico_sezione_idx");

                    b.HasIndex("Tipoelezioneid")
                        .HasName("fk_voti_storico_tipoelezione_idx");

                    b.ToTable("voti_generali_storico");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.VotiLista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Listaid")
                        .HasColumnType("int");

                    b.Property<int?>("Municipio")
                        .HasColumnType("int");

                    b.Property<int>("Sezioneid")
                        .HasColumnType("int");

                    b.Property<int>("Tipoelezioneid")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Voti")
                        .HasColumnType("int");

                    b.Property<int>("Votigeneraliid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Listaid")
                        .HasName("fk_voti_lista_liste_idx");

                    b.HasIndex("Sezioneid")
                        .HasName("fk_voti_lista_sezioni_idx");

                    b.HasIndex("Tipoelezioneid")
                        .HasName("fk_voti_lista_tipo_elezione_idx");

                    b.HasIndex("Votigeneraliid")
                        .HasName("fk_voti_lista_voti_generali_idx");

                    b.ToTable("voti_lista");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.VotiListaStorico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Listaid")
                        .HasColumnType("int");

                    b.Property<int>("Sezioneid")
                        .HasColumnType("int");

                    b.Property<int>("Tipoelezioneid")
                        .HasColumnType("int");

                    b.Property<int>("Voti")
                        .HasColumnType("int");

                    b.Property<DateTime>("Dataoperazioneold")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Utenteoperazioneold")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Municipio")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Votigeneraliid")
                        .HasColumnType("int");

                    b.HasKey("Id", "Listaid", "Sezioneid", "Tipoelezioneid", "Voti", "Dataoperazioneold", "Utenteoperazioneold")
                        .HasName("PRIMARY");

                    b.HasIndex("Listaid")
                        .HasName("fk_liste_voti_lista_storico_idx");

                    b.HasIndex("Sezioneid")
                        .HasName("fk_sezioni_voti_lista_storico_idx");

                    b.ToTable("voti_lista_storico");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.VotiPeferenzeStorico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Candidatoid")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Listaid")
                        .HasColumnType("int");

                    b.Property<int>("Numerovoti")
                        .HasColumnType("int");

                    b.Property<int>("Sezioneid")
                        .HasColumnType("int");

                    b.Property<int>("Tipoelezioneid")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Candidatoid")
                        .HasName("fk_voti_preferenze_storico_candidati_idx");

                    b.HasIndex("Listaid")
                        .HasName("fk_voti_preferenze_storico_liste_idx");

                    b.HasIndex("Sezioneid")
                        .HasName("fk_voti_preferenze_storico_sezioni_idx");

                    b.HasIndex("Tipoelezioneid")
                        .HasName("fk_voti_preferenze_storico_tipoelezione_id_idx");

                    b.ToTable("voti_peferenze_storico");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.VotiPreferenze", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Candidatoid")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Listaid")
                        .HasColumnType("int");

                    b.Property<int>("Municipio")
                        .HasColumnType("int");

                    b.Property<int>("Numerovoti")
                        .HasColumnType("int");

                    b.Property<int>("Sezioneid")
                        .HasColumnType("int");

                    b.Property<int>("Tipoelezioneid")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Candidatoid")
                        .HasName("fk_voti_preferenze_candidati_idx");

                    b.HasIndex("Listaid")
                        .HasName("fk_voti_preferenze_liste_idx");

                    b.HasIndex("Sezioneid")
                        .HasName("fk_voti_preferenze_sezioni_idx");

                    b.HasIndex("Tipoelezioneid")
                        .HasName("fk_voti_preferenze_tipoelezione_id_idx");

                    b.HasIndex("Candidatoid", "Sezioneid", "Listaid", "Tipoelezioneid")
                        .IsUnique()
                        .HasName("uk_voti_preferenze_lista_candidato_sezione");

                    b.ToTable("voti_preferenze");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.VotiSindaco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Municipio")
                        .HasColumnType("int");

                    b.Property<int>("NumeroVoti")
                        .HasColumnType("int");

                    b.Property<int>("NumeroVotiSoloSindaco")
                        .HasColumnType("int");

                    b.Property<int>("Sezioneid")
                        .HasColumnType("int");

                    b.Property<int>("Sindacoid")
                        .HasColumnType("int");

                    b.Property<int>("Tipoelezioneid")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Votigeneraliid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Sezioneid")
                        .HasName("fk_voti_sindaco_sezioni_idx");

                    b.HasIndex("Sindacoid")
                        .HasName("fk_voti_sindaco_sindaco_idx");

                    b.HasIndex("Tipoelezioneid")
                        .HasName("fk_voti_sindaco_tipo_elezioni_idx");

                    b.HasIndex("Votigeneraliid")
                        .HasName("fk_voti_sindaco_voti_generali_idx");

                    b.ToTable("voti_sindaco");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.VotiSindacoStorico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataOperazioneOld")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Municipio")
                        .HasColumnType("int");

                    b.Property<int>("NumeroVoti")
                        .HasColumnType("int");

                    b.Property<int>("NumeroVotiSoloSindaco")
                        .HasColumnType("int");

                    b.Property<int>("Sezioneid")
                        .HasColumnType("int");

                    b.Property<int>("Sindacoid")
                        .HasColumnType("int");

                    b.Property<int>("Tipoelezioneid")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UtenteOperazioneOld")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Votigeneraliid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Sezioneid")
                        .HasName("fk_voti_sindaco_old_sezioni_idx");

                    b.HasIndex("Sindacoid")
                        .HasName("fk_voti_sindaco_old_sindaco_idx");

                    b.HasIndex("Tipoelezioneid")
                        .HasName("fk_voti_sindaco_old_tipo_elezioni_idx");

                    b.ToTable("voti_sindaco_storico");
                });

            modelBuilder.Entity("Gov.Core.Entity.Pagina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Codice")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Denominazione")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Pagina");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codice = "Affluenze",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 361, DateTimeKind.Local).AddTicks(4834),
                            Denominazione = "Inserimento Affluenze",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Codice = "Affluenze",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 361, DateTimeKind.Local).AddTicks(9763),
                            Denominazione = "Modifica Affluenze",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Codice = "Affluenze",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 362, DateTimeKind.Local).AddTicks(1403),
                            Denominazione = "Visualizzazione Affluenze",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Codice = "User",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 362, DateTimeKind.Local).AddTicks(3279),
                            Denominazione = "Indice Gestione Utenti",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Codice = "Affluenze",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 362, DateTimeKind.Local).AddTicks(4587),
                            Denominazione = "Inserimento Affluenze",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Codice = "Affluenze",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 362, DateTimeKind.Local).AddTicks(5792),
                            Denominazione = "Modifica Affluenze",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            Codice = "Affluenze",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 362, DateTimeKind.Local).AddTicks(6957),
                            Denominazione = "Visualizzazione Affluenze",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            Codice = "User",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 362, DateTimeKind.Local).AddTicks(8084),
                            Denominazione = "Gestione Utenti",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            Codice = "User",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 362, DateTimeKind.Local).AddTicks(9194),
                            Denominazione = "Registrazione Utenti",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            Codice = "User",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 363, DateTimeKind.Local).AddTicks(275),
                            Denominazione = "Mio Profilo",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            Codice = "User",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 363, DateTimeKind.Local).AddTicks(1356),
                            Denominazione = "Mio Profilo",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            Codice = "Rights",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 363, DateTimeKind.Local).AddTicks(3252),
                            Denominazione = "Gestione Abilitazioni",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            Codice = "User",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 363, DateTimeKind.Local).AddTicks(4445),
                            Denominazione = "Cambio Password",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            Codice = "Home",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 363, DateTimeKind.Local).AddTicks(5555),
                            Denominazione = "Home page",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            Codice = "User",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 363, DateTimeKind.Local).AddTicks(6637),
                            Denominazione = "Cambio Password",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Gov.Core.Entity.TipoContenuto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Codice")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("TipoContenuto");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codice = "Testo",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 365, DateTimeKind.Local).AddTicks(9330),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Codice = "Icona",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 365, DateTimeKind.Local).AddTicks(9395),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Codice = "Link",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 365, DateTimeKind.Local).AddTicks(9420),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Codice = "Header",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 365, DateTimeKind.Local).AddTicks(9428),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Codice = "Image",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 365, DateTimeKind.Local).AddTicks(9435),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Codice = "Titolo",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 365, DateTimeKind.Local).AddTicks(9442),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Gov.Core.Entity.VoceMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Icona")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Voce")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("VoceMenu");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 364, DateTimeKind.Local).AddTicks(2303),
                            Icona = "user-secret",
                            Link = "/affluenze/index",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voce = "Affluenze"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 364, DateTimeKind.Local).AddTicks(5034),
                            Icona = "history",
                            Link = "/liste/index",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voce = "Liste"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 364, DateTimeKind.Local).AddTicks(6334),
                            Icona = "receipt",
                            Link = "/sindaco/index",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voce = "Sindaco"
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 364, DateTimeKind.Local).AddTicks(7663),
                            Icona = "university",
                            Link = "/iterrogazioni/index",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voce = "Interrogazioni"
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 364, DateTimeKind.Local).AddTicks(8791),
                            Icona = "user",
                            Link = "/account/index",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voce = "Partito"
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 364, DateTimeKind.Local).AddTicks(9881),
                            Icona = "user-secret",
                            Link = "/affluenze/index",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voce = "Affluenze"
                        },
                        new
                        {
                            Id = 7,
                            Active = true,
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 365, DateTimeKind.Local).AddTicks(958),
                            Icona = "history",
                            Link = "/liste/index",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voce = "Liste"
                        },
                        new
                        {
                            Id = 8,
                            Active = true,
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 365, DateTimeKind.Local).AddTicks(2111),
                            Icona = "receipt",
                            Link = "/sindaco/index",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voce = "Sindaco"
                        },
                        new
                        {
                            Id = 9,
                            Active = true,
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 365, DateTimeKind.Local).AddTicks(3177),
                            Icona = "university",
                            Link = "/interrogazioni/index",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voce = "Interrogazioni"
                        },
                        new
                        {
                            Id = 10,
                            Active = true,
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 365, DateTimeKind.Local).AddTicks(4243),
                            Icona = "user",
                            Link = "/account/index",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voce = "Account"
                        },
                        new
                        {
                            Id = 11,
                            Active = true,
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 7, 15, 14, 47, 7, 365, DateTimeKind.Local).AddTicks(5305),
                            Icona = "handshake",
                            Link = "/rights/index",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voce = "Abilitazioni"
                        });
                });

            modelBuilder.Entity("Gov.Core.Governo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataFiducia")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataIncarico")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataRevoca")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsFiducia")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LegislaturaId")
                        .HasColumnType("int");

                    b.Property<int>("NumeroMinisteri")
                        .HasColumnType("int");

                    b.Property<int>("NumeroMinisteriSenzaPortafogio")
                        .HasColumnType("int");

                    b.Property<int>("NumeroVotiCamera")
                        .HasColumnType("int");

                    b.Property<int>("NumeroVotiSenato")
                        .HasColumnType("int");

                    b.Property<int?>("PremierId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("LegislaturaId");

                    b.HasIndex("PremierId");

                    b.ToTable("Governo");
                });

            modelBuilder.Entity("Gov.Core.Identity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "4f823334-492d-45c5-abb2-d6e27a72b6e0",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "c9efc755-3ee1-4265-b494-3bcd88c02a49",
                            Name = "user",
                            NormalizedName = "user"
                        });
                });

            modelBuilder.Entity("Gov.Core.Identity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CodiceFiscale")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Cognome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomTag")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Sesso")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            CodiceFiscale = "RBRNCL74P16H501C",
                            Cognome = "Admin",
                            Email = "agnew74@gmail.com",
                            EmailConfirmed = false,
                            LastModified = new DateTime(2020, 7, 15, 14, 47, 7, 357, DateTimeKind.Local).AddTicks(923),
                            LockoutEnabled = false,
                            Nome = "Admin",
                            NormalizedEmail = "agnew74@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEBES17Aaql/nyQi+XEa4ENTXxflFpT9WchvI32qHDcJm5yEhU8WeP/NaeN4nTkbxjg==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Sesso = "Maschio",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Gov.Core.Identity.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Gov.Core.Identity.Roleclaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Gov.Core.Identity.UserAudit", b =>
                {
                    b.Property<int>("UserAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuditEvent")
                        .HasColumnType("int");

                    b.Property<int>("IdUtente")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserAuditId");

                    b.HasIndex("IdUtente");

                    b.ToTable("UserAudit");
                });

            modelBuilder.Entity("Gov.Core.Identity.Userclaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Gov.Core.Identity.Userlogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Gov.Core.Identity.Usertokens", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Gov.Core.Legislatura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CameraId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataFine")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<int?>("SenatoId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CameraId");

                    b.HasIndex("SenatoId");

                    b.ToTable("Legislatura");
                });

            modelBuilder.Entity("Gov.Core.Militanza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataFine")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataInizio")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MinistroId")
                        .HasColumnType("int");

                    b.Property<int?>("PartitoId")
                        .HasColumnType("int");

                    b.Property<int?>("PremierId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MinistroId");

                    b.HasIndex("PartitoId");

                    b.HasIndex("PremierId");

                    b.ToTable("Militanza");
                });

            modelBuilder.Entity("Gov.Core.Ministero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCessazione")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataIstituzione")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Denominazione")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("IsSenzaPortafoglio")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Ministero");
                });

            modelBuilder.Entity("Gov.Core.Ministro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataNascita")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Ministro");
                });

            modelBuilder.Entity("Gov.Core.Partito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CameraId")
                        .HasColumnType("int");

                    b.Property<int?>("CoalizioneId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int?>("SenatoId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CameraId");

                    b.HasIndex("CoalizioneId");

                    b.HasIndex("SenatoId");

                    b.ToTable("Partito");
                });

            modelBuilder.Entity("Gov.Core.Premier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataNascita")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Premier");
                });

            modelBuilder.Entity("Gov.Core.Senato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataFine")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Senato");
                });

            modelBuilder.Entity("Gov.Core.Dicastero", b =>
                {
                    b.HasOne("Gov.Core.Governo", null)
                        .WithMany("Dicasteri")
                        .HasForeignKey("GovernoId");

                    b.HasOne("Gov.Core.Ministero", "Ministero")
                        .WithMany()
                        .HasForeignKey("MinisteroId");

                    b.HasOne("Gov.Core.Ministro", "Ministro")
                        .WithMany()
                        .HasForeignKey("MinistroId");
                });

            modelBuilder.Entity("Gov.Core.Entity.Contenuto", b =>
                {
                    b.HasOne("Gov.Core.Entity.Pagina", "Pagina")
                        .WithMany()
                        .HasForeignKey("PaginaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.TipoContenuto", "TipoConenuto")
                        .WithMany()
                        .HasForeignKey("TipoContenutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Affluenze", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Iscritti", "Iscritti")
                        .WithMany("Affluenze")
                        .HasForeignKey("Iscrittiid")
                        .HasConstraintName("fk_affluenze_iscritti")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Plessi", "Plesso")
                        .WithMany("Affluenze")
                        .HasForeignKey("Plessoid")
                        .HasConstraintName("fk_affluenze_plessi");

                    b.HasOne("Gov.Core.Entity.Elezioni.Sezioni", "Sezione")
                        .WithMany("Affluenze")
                        .HasForeignKey("Sezioneid")
                        .HasConstraintName("fk_affluenza_sezioni")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.AffluenzeStorico", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Iscritti", "Iscritti")
                        .WithMany()
                        .HasForeignKey("Iscrittiid")
                        .HasConstraintName("fk_affluenze_storico_iscritti")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Plessi", "Plesso")
                        .WithMany()
                        .HasForeignKey("Plessoid")
                        .HasConstraintName("fk_affluenze_storico_plessi");

                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "Tipoelezione")
                        .WithMany()
                        .HasForeignKey("Tipoelezioneid")
                        .HasConstraintName("fk_affluenze_storico_tipo_elezione")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.AggregazioneInterrogazioni", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "Tipoelezione")
                        .WithMany("AggregazioneInterrogazioni")
                        .HasForeignKey("Tipoelezioneid")
                        .HasConstraintName("fk_aggregazione_interrogazioni_tipo_elezione")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Candidati", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Liste", "Lista")
                        .WithMany("Candidati")
                        .HasForeignKey("Listaid")
                        .HasConstraintName("fk_candidati_lista")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "Tipoelezione")
                        .WithMany("Candidati")
                        .HasForeignKey("Tipoelezioneid")
                        .HasConstraintName("fk_candidati_tipo_elezione")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Elegen", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "IdtipoelezioneNavigation")
                        .WithMany("Elegen")
                        .HasForeignKey("Idtipoelezione")
                        .HasConstraintName("fk_elegen_tipo_elezione")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Iscritti", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Sezioni", "IdsezioneNavigation")
                        .WithOne("Iscritti")
                        .HasForeignKey("Gov.Core.Entity.Elezioni.Iscritti", "Idsezione")
                        .HasConstraintName("fk_sezioni_iscritti")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "IdtipoelezioneNavigation")
                        .WithMany("Iscritti")
                        .HasForeignKey("Idtipoelezione")
                        .HasConstraintName("fk_tipo_elezione_iscritti")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Tiposezione", "IdtiposezioneNavigation")
                        .WithMany("Iscritti")
                        .HasForeignKey("Idtiposezione")
                        .HasConstraintName("fk_tipo_sezione_iscritti");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Liste", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Raggruppamento", "Raggruppamenti")
                        .WithMany("Liste")
                        .HasForeignKey("Coalizioneid")
                        .HasConstraintName("fk_liste_coalizioni");

                    b.HasOne("Gov.Core.Entity.Elezioni.Sindaci", "Sindaco")
                        .WithMany("Liste")
                        .HasForeignKey("Sindacoid")
                        .HasConstraintName("fk_liste_sindaci");

                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "Tipoelezione")
                        .WithMany("Liste")
                        .HasForeignKey("Tipoelezioneid")
                        .HasConstraintName("fl_liste_tipo_elezione")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Matrice", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "IdtipoelezioneNavigation")
                        .WithMany("Matrice")
                        .HasForeignKey("Idtipoelezione")
                        .HasConstraintName("fk_matrice_tipo_elezione")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Plessi", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "IdtipoelezioneNavigation")
                        .WithMany("Plessi")
                        .HasForeignKey("Idtipoelezione")
                        .HasConstraintName("fk_plessi_tipoelezione")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.ProfiloVoti", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Sezioni", "Sezione")
                        .WithMany("ProfiloVoti")
                        .HasForeignKey("Sezioneid")
                        .HasConstraintName("fk_voti_sezioni")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "Tipoelezione")
                        .WithMany("ProfiloVoti")
                        .HasForeignKey("Tipoelezioneid")
                        .HasConstraintName("fk_voti_tipoelezione")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.VotiGenerali", "Votigenerali")
                        .WithMany("ProfiloVoti")
                        .HasForeignKey("Votigeneraliid")
                        .HasConstraintName("fk_voti_votigenerali");

                    b.HasOne("Gov.Core.Entity.Elezioni.VotiLista", "Votilista")
                        .WithMany("ProfiloVoti")
                        .HasForeignKey("Votilistaid")
                        .HasConstraintName("fk_voti_votilista");

                    b.HasOne("Gov.Core.Entity.Elezioni.VotiSindaco", "Votisindaco")
                        .WithMany("ProfiloVoti")
                        .HasForeignKey("Votisindacoid")
                        .HasConstraintName("fk_voti_votisindaco");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Raggruppamento", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "IdtipoelezioneNavigation")
                        .WithMany("Raggruppamenti")
                        .HasForeignKey("Idtipoelezione")
                        .HasConstraintName("fk_tipoelezioni_coalizioni")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Sindaci", "Sindaco")
                        .WithMany("Raggruppamenti")
                        .HasForeignKey("Sindacoid")
                        .HasConstraintName("fk_sindaci_coalizioni")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.RicalcoliAffluenza", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "IdtipoelezioneNavigation")
                        .WithMany("RicalcoliAffluenza")
                        .HasForeignKey("Idtipoelezione")
                        .HasConstraintName("fk_ricaloli_affluenza_tipo_elezione")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.TipoRicalcolo", "IdtiporicalcoloNavigation")
                        .WithMany("RicalcoliAffluenza")
                        .HasForeignKey("Idtiporicalcolo")
                        .HasConstraintName("fk_ricalcoli_affluenza_tipo_ricalcolo")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.RicalcoloAperturaCostituzione", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "IdtipoelezioneNavigation")
                        .WithMany("RicalcoliAperturaCostituzione")
                        .HasForeignKey("Idtipoelezione")
                        .HasConstraintName("fk_ricalcoli_apertura_costituzione_tipo_elezione")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.TipoRicalcolo", "IdtiporicalcoloNavigation")
                        .WithMany("RicalcoliAperturaCostituzione")
                        .HasForeignKey("Idtiporicalcolo")
                        .HasConstraintName("fk_ricalcoli_apertura_costituzione_tipo_ricalcolo")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.RicalcoloPreferenze", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Candidati", "Candidato")
                        .WithMany("RicalcoloPreferenze")
                        .HasForeignKey("Candidatoid")
                        .HasConstraintName("fk_ricalcolo_preferenze_candidato")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Liste", "Lista")
                        .WithMany("RicalcoloPreferenze")
                        .HasForeignKey("Listaid")
                        .HasConstraintName("fk_ricalcolo_preferenze_liste")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "Tipoelezione")
                        .WithMany("RicalcoloPreferenze")
                        .HasForeignKey("Tipoelezioneid")
                        .HasConstraintName("fk_ricalcolo_preferenze_tipo_elezione")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.TipoRicalcolo", "Tiporicalcolo")
                        .WithMany("RicalcoloPreferenze")
                        .HasForeignKey("Tiporicalcoloid")
                        .HasConstraintName("fk_ricalcolo_tipo_ricalcolo")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.RicalcoloVotiLista", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Liste", "IdlistaNavigation")
                        .WithMany("RicalcoloVotiLista")
                        .HasForeignKey("Idlista")
                        .HasConstraintName("fk_ricalcolo_voti_lista")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "IdtipoelezioneNavigation")
                        .WithMany("RicalcoloVotiLista")
                        .HasForeignKey("Idtipoelezione")
                        .HasConstraintName("fk_ricalcolo_voti_tipo_elezione")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.TipoRicalcolo", "IdtiporicalcoloNavigation")
                        .WithMany("RicalcoloVotiLista")
                        .HasForeignKey("Idtiporicalcolo")
                        .HasConstraintName("fk_ricalcolo_voti_tipo_ricalcolo")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.RicalcoloVotiRaggruppamento", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Raggruppamento", "Raggruppamenti")
                        .WithMany("RicalcoloVotiCoalizioni")
                        .HasForeignKey("Coalizioneid")
                        .HasConstraintName("fk_riacalcolo_coalizioni_coalizioni")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "Tipoelezione")
                        .WithMany("RicalcoloVotiCoalizioni")
                        .HasForeignKey("Tipoelezioneid")
                        .HasConstraintName("fk_ricalcolo_coalizioni_tipo_elezioni")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.TipoRicalcolo", "Tiporicalcolo")
                        .WithMany("RicalcoloVotiCoalizioni")
                        .HasForeignKey("Tiporicalcoloid")
                        .HasConstraintName("fk_ricalcolo_coalizioni_tipo_ricalcolo")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.RicalcoloVotiSindaco", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Sindaci", "Sindaco")
                        .WithMany("RicalcoloVotiSindaco")
                        .HasForeignKey("Sindacoid")
                        .HasConstraintName("fk_ricalcolo_voti_sindaco_sindaco")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "Tipoelezione")
                        .WithMany("RicalcoloVotiSindaco")
                        .HasForeignKey("Tipoelezioneid")
                        .HasConstraintName("fk_ricalcolo_voti_sindaco_tipo_elezione")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.TipoRicalcolo", "Tiporicalcolo")
                        .WithMany("RicalcoloVotiSindaco")
                        .HasForeignKey("Tiporicalcoloid")
                        .HasConstraintName("fk_ricalcolo_voti_sindaco_tipo_ricalcolo")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Sezioni", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Plessi", "IdplessoNavigation")
                        .WithMany("Sezioni")
                        .HasForeignKey("Idplesso")
                        .HasConstraintName("fk_sezioni_plessi");

                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "IdtipoelezioneNavigation")
                        .WithMany("Sezioni")
                        .HasForeignKey("Idtipoelezione")
                        .HasConstraintName("fk_sezioni_tipoelezione");

                    b.HasOne("Gov.Core.Entity.Elezioni.Tiposezione", "IdtiposezioneNavigation")
                        .WithMany("Sezioni")
                        .HasForeignKey("Idtiposezione")
                        .HasConstraintName("fk_sezioni_tiposezione");
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.Sindaci", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "Tipoelezione")
                        .WithMany("Sindaci")
                        .HasForeignKey("Tipoelezioneid")
                        .HasConstraintName("fk_tipo_elezione_sindaci")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.TipoInterrogazione", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "Tipoelezione")
                        .WithMany("TipoInterrogazione")
                        .HasForeignKey("Tipoelezioneid")
                        .HasConstraintName("tipo_interrogazione_tipo_elezione")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.TipoRicalcolo", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "IdtipoelezioneNavigation")
                        .WithMany("TipoRicalcolo")
                        .HasForeignKey("Idtipoelezione")
                        .HasConstraintName("fk_tipo_ricalcolo_tipo_elezione")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.TipoRicalcoloAggregazione", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "Tipoelezione")
                        .WithMany("TipoRicalcoloAggregazione")
                        .HasForeignKey("Tipoelezioneid")
                        .HasConstraintName("tipo_ricalcolo_aggregazione_tipo_elezione")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.UsersSezioni", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "IdtipoelezioneNavigation")
                        .WithMany("UsersSezioni")
                        .HasForeignKey("Idtipoelezione")
                        .HasConstraintName("fk_users_sezione_tipoelezione");

                    b.HasOne("Gov.Core.Entity.Elezioni.Sezioni", "Sezione")
                        .WithMany("UsersSezioni")
                        .HasForeignKey("Sezioneid")
                        .HasConstraintName("fk_users_sezioni_sezioni");

                    b.HasOne("Gov.Core.Identity.ApplicationUser", "User")
                        .WithMany("UsersSezioni")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_users_sezioni_users")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.VotiGenerali", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Sezioni", "Sezione")
                        .WithMany("VotiGenerali")
                        .HasForeignKey("Sezioneid")
                        .HasConstraintName("fk_votigenerali_sezione")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "Tipoelezione")
                        .WithMany("VotiGenerali")
                        .HasForeignKey("Tipoelezioneid")
                        .HasConstraintName("fk_votigenerali_tipoelezione")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.VotiGeneraliStorico", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Sezioni", "Sezione")
                        .WithMany()
                        .HasForeignKey("Sezioneid")
                        .HasConstraintName("fk_voti_storico_sezione")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "Tipoelezione")
                        .WithMany()
                        .HasForeignKey("Tipoelezioneid")
                        .HasConstraintName("fk_voti_storico_tipoelezione")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.VotiLista", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Liste", "Lista")
                        .WithMany("VotiLista")
                        .HasForeignKey("Listaid")
                        .HasConstraintName("fk_voti_lista_liste")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Sezioni", "Sezione")
                        .WithMany("VotiLista")
                        .HasForeignKey("Sezioneid")
                        .HasConstraintName("fk_voti_lista_sezioni")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "Tipoelezione")
                        .WithMany("VotiLista")
                        .HasForeignKey("Tipoelezioneid")
                        .HasConstraintName("fk_voti_lista_tipo_elezione")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.VotiGenerali", "Votigenerali")
                        .WithMany("VotiLista")
                        .HasForeignKey("Votigeneraliid")
                        .HasConstraintName("fk_voti_lista_voti_generali")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.VotiListaStorico", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Liste", "Lista")
                        .WithMany("VotiListaStorico")
                        .HasForeignKey("Listaid")
                        .HasConstraintName("fk_liste_voti_lista_storico")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Sezioni", "Sezione")
                        .WithMany("VotiListaStorico")
                        .HasForeignKey("Sezioneid")
                        .HasConstraintName("fk_sezioni_voti_lista_storico")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.VotiPeferenzeStorico", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Candidati", "Candidato")
                        .WithMany("VotiPeferenzeStorico")
                        .HasForeignKey("Candidatoid")
                        .HasConstraintName("fk_voti_preferenze_storico_candidati")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Liste", "Lista")
                        .WithMany("VotiPeferenzeStorico")
                        .HasForeignKey("Listaid")
                        .HasConstraintName("fk_voti_preferenze_storico_liste")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Sezioni", "Sezione")
                        .WithMany("VotiPeferenzeStorico")
                        .HasForeignKey("Sezioneid")
                        .HasConstraintName("fk_voti_preferenze_storico_sezioni")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "Tipoelezione")
                        .WithMany("VotiPeferenzeStorico")
                        .HasForeignKey("Tipoelezioneid")
                        .HasConstraintName("fk_voti_preferenze_storico_tipoelezione_id")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.VotiPreferenze", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Candidati", "Candidato")
                        .WithMany("VotiPreferenze")
                        .HasForeignKey("Candidatoid")
                        .HasConstraintName("fk_voti_preferenze_candidati")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Liste", "Lista")
                        .WithMany("VotiPreferenze")
                        .HasForeignKey("Listaid")
                        .HasConstraintName("fk_voti_preferenze_liste")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Sezioni", "Sezione")
                        .WithMany("VotiPreferenze")
                        .HasForeignKey("Sezioneid")
                        .HasConstraintName("fk_voti_preferenze_sezioni")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "Tipoelezione")
                        .WithMany("VotiPreferenze")
                        .HasForeignKey("Tipoelezioneid")
                        .HasConstraintName("fk_voti_preferenze_tipoelezione_id")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.VotiSindaco", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Sezioni", "Sezione")
                        .WithMany("VotiSindaco")
                        .HasForeignKey("Sezioneid")
                        .HasConstraintName("fk_voti_sindaco_sezioni")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Sindaci", "Sindaco")
                        .WithMany("VotiSindaco")
                        .HasForeignKey("Sindacoid")
                        .HasConstraintName("fk_voti_sindaco_sindaco")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "Tipoelezione")
                        .WithMany("VotiSindaco")
                        .HasForeignKey("Tipoelezioneid")
                        .HasConstraintName("fk_voti_sindaco_tipo_elezioni")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.VotiGenerali", "Votigenerali")
                        .WithMany("VotiSindaco")
                        .HasForeignKey("Votigeneraliid")
                        .HasConstraintName("fk_voti_sindaco_voti_generali")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Elezioni.VotiSindacoStorico", b =>
                {
                    b.HasOne("Gov.Core.Entity.Elezioni.Sezioni", "Sezione")
                        .WithMany()
                        .HasForeignKey("Sezioneid")
                        .HasConstraintName("fk_voti_sindaco_old_sezioni")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Sindaci", "Sindaco")
                        .WithMany()
                        .HasForeignKey("Sindacoid")
                        .HasConstraintName("fk_voti_sindaco_old_sindaco")
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.Elezioni.Tipoelezione", "Tipoelezione")
                        .WithMany()
                        .HasForeignKey("Tipoelezioneid")
                        .HasConstraintName("fk_voti_sindaco_old_tipo_elezioni")
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Pagina", b =>
                {
                    b.HasOne("Gov.Core.Identity.ApplicationRole", "Role")
                        .WithMany("Pagine")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.VoceMenu", b =>
                {
                    b.HasOne("Gov.Core.Identity.ApplicationRole", "Role")
                        .WithMany("VociMenu")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Governo", b =>
                {
                    b.HasOne("Gov.Core.Legislatura", "Legislatura")
                        .WithMany()
                        .HasForeignKey("LegislaturaId");

                    b.HasOne("Gov.Core.Premier", "Premier")
                        .WithMany()
                        .HasForeignKey("PremierId");
                });

            modelBuilder.Entity("Gov.Core.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("Gov.Core.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gov.Core.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Identity.Roleclaims", b =>
                {
                    b.HasOne("Gov.Core.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Identity.UserAudit", b =>
                {
                    b.HasOne("Gov.Core.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("IdUtente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Identity.Userclaims", b =>
                {
                    b.HasOne("Gov.Core.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Identity.Userlogins", b =>
                {
                    b.HasOne("Gov.Core.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Identity.Usertokens", b =>
                {
                    b.HasOne("Gov.Core.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Legislatura", b =>
                {
                    b.HasOne("Gov.Core.Camera", "Camera")
                        .WithMany()
                        .HasForeignKey("CameraId");

                    b.HasOne("Gov.Core.Senato", "Senato")
                        .WithMany()
                        .HasForeignKey("SenatoId");
                });

            modelBuilder.Entity("Gov.Core.Militanza", b =>
                {
                    b.HasOne("Gov.Core.Ministro", null)
                        .WithMany("Militanze")
                        .HasForeignKey("MinistroId");

                    b.HasOne("Gov.Core.Partito", "Partito")
                        .WithMany()
                        .HasForeignKey("PartitoId");

                    b.HasOne("Gov.Core.Premier", null)
                        .WithMany("Militanze")
                        .HasForeignKey("PremierId");
                });

            modelBuilder.Entity("Gov.Core.Partito", b =>
                {
                    b.HasOne("Gov.Core.Camera", null)
                        .WithMany("Partiti")
                        .HasForeignKey("CameraId");

                    b.HasOne("Gov.Core.Coalizione", "Coalizione")
                        .WithMany()
                        .HasForeignKey("CoalizioneId");

                    b.HasOne("Gov.Core.Senato", null)
                        .WithMany("Partiti")
                        .HasForeignKey("SenatoId");
                });
#pragma warning restore 612, 618
        }
    }
}
