// <auto-generated />
using System;
using Gov.Structure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Gov.Structure.Migrations
{
    [DbContext(typeof(GovContext))]
    [Migration("20200618173845_GovMigration")]
    partial class GovMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Gov.Core.Camera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataFine")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Camera");
                });

            modelBuilder.Entity("Gov.Core.Coalizione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Denominazione")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Coalizione");
                });

            modelBuilder.Entity("Gov.Core.Dicastero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataFine")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataGiuramento")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataSfiducia")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("GovernoId")
                        .HasColumnType("int");

                    b.Property<int?>("MinisteroId")
                        .HasColumnType("int");

                    b.Property<int?>("MinistroId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("GovernoId");

                    b.HasIndex("MinisteroId");

                    b.HasIndex("MinistroId");

                    b.ToTable("Dicastero");
                });

            modelBuilder.Entity("Gov.Core.Entity.Contenuto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContentuoCard")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PaginaId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<int>("TipoContenutoId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("PaginaId");

                    b.HasIndex("TipoContenutoId");

                    b.ToTable("Contenuto");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContentuoCard = "Da questa pagina è possibile registrare un nuovo Premier",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(6671),
                            PaginaId = 1,
                            Tipo = "Testo",
                            TipoContenutoId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            ContentuoCard = "person-plus-fill",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8782),
                            PaginaId = 1,
                            Tipo = "Icona",
                            TipoContenutoId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            ContentuoCard = "/premier/inserimento",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8820),
                            PaginaId = 1,
                            Tipo = "Link",
                            TipoContenutoId = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            ContentuoCard = "Premier Inserimento",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8825),
                            PaginaId = 1,
                            Tipo = "Header",
                            TipoContenutoId = 4,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            ContentuoCard = "Da questa pagina è possibile modificare un Premier",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8830),
                            PaginaId = 2,
                            Tipo = "Testo",
                            TipoContenutoId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            ContentuoCard = "person-check-fill",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8834),
                            PaginaId = 2,
                            Tipo = "Icona",
                            TipoContenutoId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            ContentuoCard = "/premier/modifica",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8839),
                            PaginaId = 2,
                            Tipo = "Link",
                            TipoContenutoId = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            ContentuoCard = "Premier Modifica",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8843),
                            PaginaId = 2,
                            Tipo = "Header",
                            TipoContenutoId = 4,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            ContentuoCard = "Da questa pagina è possibile visualizzare i Premier",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8847),
                            PaginaId = 3,
                            Tipo = "Testo",
                            TipoContenutoId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            ContentuoCard = "people-fill",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8851),
                            PaginaId = 3,
                            Tipo = "Icona",
                            TipoContenutoId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            ContentuoCard = "/premier/visualizza",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8854),
                            PaginaId = 3,
                            Tipo = "Link",
                            TipoContenutoId = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            ContentuoCard = "Premier Visualizzazione",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8857),
                            PaginaId = 3,
                            Tipo = "Header",
                            TipoContenutoId = 4,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            ContentuoCard = "Da questa pagina è possibile gestire gli Utenti",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8861),
                            PaginaId = 8,
                            Tipo = "Testo",
                            TipoContenutoId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            ContentuoCard = "people-fill",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8865),
                            PaginaId = 8,
                            Tipo = "Icona",
                            TipoContenutoId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            ContentuoCard = "/account/manage",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8868),
                            PaginaId = 8,
                            Tipo = "Link",
                            TipoContenutoId = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            ContentuoCard = "Gestione Utenti",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8872),
                            PaginaId = 8,
                            Tipo = "Header",
                            TipoContenutoId = 4,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            ContentuoCard = "Da questa pagina è possibile registrare nuovi utenti",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8875),
                            PaginaId = 9,
                            Tipo = "Testo",
                            TipoContenutoId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            ContentuoCard = "person-plus-fill",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8879),
                            PaginaId = 9,
                            Tipo = "Icona",
                            TipoContenutoId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19,
                            ContentuoCard = "/account/register",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8882),
                            PaginaId = 9,
                            Tipo = "Link",
                            TipoContenutoId = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20,
                            ContentuoCard = "Registrazione Utente",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8886),
                            PaginaId = 9,
                            Tipo = "Header",
                            TipoContenutoId = 4,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 21,
                            ContentuoCard = "Da questa pagina è possibile cambiare la password",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8889),
                            PaginaId = 13,
                            Tipo = "Testo",
                            TipoContenutoId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 22,
                            ContentuoCard = "gear-wide-connected",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8893),
                            PaginaId = 13,
                            Tipo = "Icona",
                            TipoContenutoId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 23,
                            ContentuoCard = "/account/changepassword",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8896),
                            PaginaId = 13,
                            Tipo = "Link",
                            TipoContenutoId = 3,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 24,
                            ContentuoCard = "Cambio password",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8899),
                            PaginaId = 13,
                            Tipo = "Header",
                            TipoContenutoId = 4,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 25,
                            ContentuoCard = "https://www.panoramasanita.it/wp-content/uploads/2019/05/roma.jpg",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8903),
                            PaginaId = 14,
                            Tipo = "Image",
                            TipoContenutoId = 5,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 26,
                            ContentuoCard = "Gestione Utenti",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8906),
                            PaginaId = 14,
                            Tipo = "Titolo",
                            TipoContenutoId = 6,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 27,
                            ContentuoCard = "https://res.cloudinary.com/hzekpb1cg/image/upload/c_fill,h_581,w_1185,f_auto/s3/public/prod/s3fs-public/Quartieri-di-Roma.jpg",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8910),
                            PaginaId = 14,
                            Tipo = "Image",
                            TipoContenutoId = 5,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 28,
                            ContentuoCard = "Gestione Premier",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8913),
                            PaginaId = 14,
                            Tipo = "Titolo",
                            TipoContenutoId = 6,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 29,
                            ContentuoCard = "https://roma.unicatt.it/ingresso-roma-992x560.jpg",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8916),
                            PaginaId = 14,
                            Tipo = "Image",
                            TipoContenutoId = 5,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 30,
                            ContentuoCard = "Gestione Governo",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 139, DateTimeKind.Local).AddTicks(8920),
                            PaginaId = 14,
                            Tipo = "Titolo",
                            TipoContenutoId = 6,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Gov.Core.Entity.Pagina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Codice")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Denominazione")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Pagina");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codice = "Premier",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 140, DateTimeKind.Local).AddTicks(263),
                            Denominazione = "Inserimento Premier",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Codice = "Premier",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 140, DateTimeKind.Local).AddTicks(1710),
                            Denominazione = "Modifica Premier",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Codice = "Premier",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 140, DateTimeKind.Local).AddTicks(2307),
                            Denominazione = "Visualizzazione Premier",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Codice = "User",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 140, DateTimeKind.Local).AddTicks(3238),
                            Denominazione = "Indice Gestione Utenti",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Codice = "Premier",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 140, DateTimeKind.Local).AddTicks(3839),
                            Denominazione = "Inserimento Premier",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Codice = "Premier",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 140, DateTimeKind.Local).AddTicks(4390),
                            Denominazione = "Modifica Premier",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            Codice = "Premier",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 140, DateTimeKind.Local).AddTicks(4923),
                            Denominazione = "Visualizzazione Premier",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            Codice = "User",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 140, DateTimeKind.Local).AddTicks(5564),
                            Denominazione = "Gestione Utenti",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            Codice = "User",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 140, DateTimeKind.Local).AddTicks(6062),
                            Denominazione = "Registrazione Utenti",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            Codice = "User",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 140, DateTimeKind.Local).AddTicks(6556),
                            Denominazione = "Mio Profilo",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            Codice = "User",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 140, DateTimeKind.Local).AddTicks(7046),
                            Denominazione = "Mio Profilo",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            Codice = "Rights",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 140, DateTimeKind.Local).AddTicks(7539),
                            Denominazione = "Gestione Abilitazioni",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            Codice = "User",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 140, DateTimeKind.Local).AddTicks(8025),
                            Denominazione = "Cambio Password",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            Codice = "Home",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 140, DateTimeKind.Local).AddTicks(8514),
                            Denominazione = "Home page",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            Codice = "User",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 140, DateTimeKind.Local).AddTicks(9000),
                            Denominazione = "Cambio Password",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Gov.Core.Entity.TipoContenuto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Codice")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("TipoContenuto");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codice = "Testo",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 141, DateTimeKind.Local).AddTicks(9258),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Codice = "Icona",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 141, DateTimeKind.Local).AddTicks(9310),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Codice = "Link",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 141, DateTimeKind.Local).AddTicks(9319),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Codice = "Header",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 141, DateTimeKind.Local).AddTicks(9323),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Codice = "Image",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 141, DateTimeKind.Local).AddTicks(9326),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Codice = "Titolo",
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 141, DateTimeKind.Local).AddTicks(9330),
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Gov.Core.Entity.VoceMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Icona")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Voce")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("VoceMenu");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 141, DateTimeKind.Local).AddTicks(1534),
                            Icona = "user-secret",
                            Link = "/premier/index",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voce = "Premier"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 141, DateTimeKind.Local).AddTicks(2797),
                            Icona = "history",
                            Link = "/governo/index",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voce = "Governo"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 141, DateTimeKind.Local).AddTicks(3354),
                            Icona = "receipt",
                            Link = "/dicastero/index",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voce = "Dicastero"
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 141, DateTimeKind.Local).AddTicks(3903),
                            Icona = "university",
                            Link = "/partito/index",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voce = "Partito"
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 141, DateTimeKind.Local).AddTicks(4478),
                            Icona = "user",
                            Link = "/account/index",
                            RoleId = 2,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voce = "Partito"
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 141, DateTimeKind.Local).AddTicks(4975),
                            Icona = "user-secret",
                            Link = "/premier/index",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voce = "Premier"
                        },
                        new
                        {
                            Id = 7,
                            Active = true,
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 141, DateTimeKind.Local).AddTicks(5463),
                            Icona = "history",
                            Link = "/governo/index",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voce = "Governo"
                        },
                        new
                        {
                            Id = 8,
                            Active = true,
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 141, DateTimeKind.Local).AddTicks(5954),
                            Icona = "receipt",
                            Link = "/dicastero/index",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voce = "Dicastero"
                        },
                        new
                        {
                            Id = 9,
                            Active = true,
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 141, DateTimeKind.Local).AddTicks(6572),
                            Icona = "university",
                            Link = "/partito/index",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voce = "Partito"
                        },
                        new
                        {
                            Id = 10,
                            Active = true,
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 141, DateTimeKind.Local).AddTicks(7044),
                            Icona = "user",
                            Link = "/account/index",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voce = "Account"
                        },
                        new
                        {
                            Id = 11,
                            Active = true,
                            CreatedBy = "Caricamento",
                            CreatedDate = new DateTime(2020, 6, 18, 19, 38, 45, 141, DateTimeKind.Local).AddTicks(7519),
                            Icona = "handshake",
                            Link = "/rights/index",
                            RoleId = 1,
                            UpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Voce = "Abilitazioni"
                        });
                });

            modelBuilder.Entity("Gov.Core.Governo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataFiducia")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataIncarico")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataRevoca")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsFiducia")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LegislaturaId")
                        .HasColumnType("int");

                    b.Property<int>("NumeroMinisteri")
                        .HasColumnType("int");

                    b.Property<int>("NumeroMinisteriSenzaPortafogio")
                        .HasColumnType("int");

                    b.Property<int>("NumeroVotiCamera")
                        .HasColumnType("int");

                    b.Property<int>("NumeroVotiSenato")
                        .HasColumnType("int");

                    b.Property<int?>("PremierId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("LegislaturaId");

                    b.HasIndex("PremierId");

                    b.ToTable("Governo");
                });

            modelBuilder.Entity("Gov.Core.Identity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "6218897a-541d-418e-ae37-5dcec6234ab4",
                            Name = "admin",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "672e7d23-192e-4d2f-bdc2-500dbc0ab7bd",
                            Name = "user",
                            NormalizedName = "user"
                        });
                });

            modelBuilder.Entity("Gov.Core.Identity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CodiceFiscale")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Cognome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CustomTag")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Sesso")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            CodiceFiscale = "RBRNCL74P16H501C",
                            Cognome = "Admin",
                            Email = "agnew74@gmail.com",
                            EmailConfirmed = false,
                            LastModified = new DateTime(2020, 6, 18, 19, 38, 45, 138, DateTimeKind.Local).AddTicks(2614),
                            LockoutEnabled = false,
                            Nome = "Admin",
                            NormalizedEmail = "agnew74@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEMDQBBppp2tpKOuW4fDjpGZXjyBApLm1t/FCe7TKGELWIz0wN3EGvoQm/pQOtolrgA==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Sesso = "Maschio",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Gov.Core.Identity.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Gov.Core.Identity.Roleclaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Gov.Core.Identity.UserAudit", b =>
                {
                    b.Property<int>("UserAuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuditEvent")
                        .HasColumnType("int");

                    b.Property<int>("IdUtente")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserAuditId");

                    b.HasIndex("IdUtente");

                    b.ToTable("UserAudit");
                });

            modelBuilder.Entity("Gov.Core.Identity.Userclaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Gov.Core.Identity.Userlogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(128) CHARACTER SET utf8mb4")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Gov.Core.Identity.Usertokens", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Gov.Core.Legislatura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CameraId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataFine")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<int?>("SenatoId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CameraId");

                    b.HasIndex("SenatoId");

                    b.ToTable("Legislatura");
                });

            modelBuilder.Entity("Gov.Core.Militanza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataFine")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataInizio")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MinistroId")
                        .HasColumnType("int");

                    b.Property<int?>("PartitoId")
                        .HasColumnType("int");

                    b.Property<int?>("PremierId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MinistroId");

                    b.HasIndex("PartitoId");

                    b.HasIndex("PremierId");

                    b.ToTable("Militanza");
                });

            modelBuilder.Entity("Gov.Core.Ministero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataCessazione")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataIstituzione")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Denominazione")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("IsSenzaPortafoglio")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Ministero");
                });

            modelBuilder.Entity("Gov.Core.Ministro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataNascita")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Ministro");
                });

            modelBuilder.Entity("Gov.Core.Partito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CameraId")
                        .HasColumnType("int");

                    b.Property<int?>("CoalizioneId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<int?>("SenatoId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CameraId");

                    b.HasIndex("CoalizioneId");

                    b.HasIndex("SenatoId");

                    b.ToTable("Partito");
                });

            modelBuilder.Entity("Gov.Core.Premier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataNascita")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Premier");
                });

            modelBuilder.Entity("Gov.Core.Senato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataFine")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DataInizio")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Senato");
                });

            modelBuilder.Entity("Gov.Core.Dicastero", b =>
                {
                    b.HasOne("Gov.Core.Governo", null)
                        .WithMany("Dicasteri")
                        .HasForeignKey("GovernoId");

                    b.HasOne("Gov.Core.Ministero", "Ministero")
                        .WithMany()
                        .HasForeignKey("MinisteroId");

                    b.HasOne("Gov.Core.Ministro", "Ministro")
                        .WithMany()
                        .HasForeignKey("MinistroId");
                });

            modelBuilder.Entity("Gov.Core.Entity.Contenuto", b =>
                {
                    b.HasOne("Gov.Core.Entity.Pagina", "Pagina")
                        .WithMany()
                        .HasForeignKey("PaginaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Gov.Core.Entity.TipoContenuto", "TipoConenuto")
                        .WithMany()
                        .HasForeignKey("TipoContenutoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.Pagina", b =>
                {
                    b.HasOne("Gov.Core.Identity.ApplicationRole", "Role")
                        .WithMany("Pagine")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Entity.VoceMenu", b =>
                {
                    b.HasOne("Gov.Core.Identity.ApplicationRole", "Role")
                        .WithMany("VociMenu")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Governo", b =>
                {
                    b.HasOne("Gov.Core.Legislatura", "Legislatura")
                        .WithMany()
                        .HasForeignKey("LegislaturaId");

                    b.HasOne("Gov.Core.Premier", "Premier")
                        .WithMany()
                        .HasForeignKey("PremierId");
                });

            modelBuilder.Entity("Gov.Core.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("Gov.Core.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gov.Core.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Identity.Roleclaims", b =>
                {
                    b.HasOne("Gov.Core.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Identity.UserAudit", b =>
                {
                    b.HasOne("Gov.Core.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("IdUtente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Identity.Userclaims", b =>
                {
                    b.HasOne("Gov.Core.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Identity.Userlogins", b =>
                {
                    b.HasOne("Gov.Core.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Identity.Usertokens", b =>
                {
                    b.HasOne("Gov.Core.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gov.Core.Legislatura", b =>
                {
                    b.HasOne("Gov.Core.Camera", "Camera")
                        .WithMany()
                        .HasForeignKey("CameraId");

                    b.HasOne("Gov.Core.Senato", "Senato")
                        .WithMany()
                        .HasForeignKey("SenatoId");
                });

            modelBuilder.Entity("Gov.Core.Militanza", b =>
                {
                    b.HasOne("Gov.Core.Ministro", null)
                        .WithMany("Militanze")
                        .HasForeignKey("MinistroId");

                    b.HasOne("Gov.Core.Partito", "Partito")
                        .WithMany()
                        .HasForeignKey("PartitoId");

                    b.HasOne("Gov.Core.Premier", null)
                        .WithMany("Militanze")
                        .HasForeignKey("PremierId");
                });

            modelBuilder.Entity("Gov.Core.Partito", b =>
                {
                    b.HasOne("Gov.Core.Camera", null)
                        .WithMany("Partiti")
                        .HasForeignKey("CameraId");

                    b.HasOne("Gov.Core.Coalizione", "Coalizione")
                        .WithMany()
                        .HasForeignKey("CoalizioneId");

                    b.HasOne("Gov.Core.Senato", null)
                        .WithMany("Partiti")
                        .HasForeignKey("SenatoId");
                });
#pragma warning restore 612, 618
        }
    }
}
